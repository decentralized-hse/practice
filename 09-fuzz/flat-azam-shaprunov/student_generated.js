// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var ds = ds || {};

/**
 * @constructor
 */
ds.Proj = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {ds.Proj}
 */
ds.Proj.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {ds.Proj=} obj
 * @returns {ds.Proj}
 */
ds.Proj.getRootAsProj = function(bb, obj) {
  return (obj || new ds.Proj).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {ds.Proj=} obj
 * @returns {ds.Proj}
 */
ds.Proj.getSizePrefixedRootAsProj = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ds.Proj).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
ds.Proj.prototype.repo = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
ds.Proj.prototype.mark = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
ds.Proj.startProj = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} repoOffset
 */
ds.Proj.addRepo = function(builder, repoOffset) {
  builder.addFieldOffset(0, repoOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} mark
 */
ds.Proj.addMark = function(builder, mark) {
  builder.addFieldInt8(1, mark, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
ds.Proj.endProj = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} repoOffset
 * @param {number} mark
 * @returns {flatbuffers.Offset}
 */
ds.Proj.createProj = function(builder, repoOffset, mark) {
  ds.Proj.startProj(builder);
  ds.Proj.addRepo(builder, repoOffset);
  ds.Proj.addMark(builder, mark);
  return ds.Proj.endProj(builder);
}

/**
 * @constructor
 */
ds.Student = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {ds.Student}
 */
ds.Student.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {ds.Student=} obj
 * @returns {ds.Student}
 */
ds.Student.getRootAsStudent = function(bb, obj) {
  return (obj || new ds.Student).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {ds.Student=} obj
 * @returns {ds.Student}
 */
ds.Student.getSizePrefixedRootAsStudent = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ds.Student).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
ds.Student.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
ds.Student.prototype.login = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
ds.Student.prototype.group = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
ds.Student.prototype.practice = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
ds.Student.prototype.practiceLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
ds.Student.prototype.practiceArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {ds.Proj=} obj
 * @returns {ds.Proj|null}
 */
ds.Student.prototype.project = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new ds.Proj).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {number}
 */
ds.Student.prototype.mark = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
ds.Student.startStudent = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
ds.Student.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} loginOffset
 */
ds.Student.addLogin = function(builder, loginOffset) {
  builder.addFieldOffset(1, loginOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} groupOffset
 */
ds.Student.addGroup = function(builder, groupOffset) {
  builder.addFieldOffset(2, groupOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} practiceOffset
 */
ds.Student.addPractice = function(builder, practiceOffset) {
  builder.addFieldOffset(3, practiceOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
ds.Student.createPracticeVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ds.Student.startPracticeVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} projectOffset
 */
ds.Student.addProject = function(builder, projectOffset) {
  builder.addFieldOffset(4, projectOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} mark
 */
ds.Student.addMark = function(builder, mark) {
  builder.addFieldFloat32(5, mark, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
ds.Student.endStudent = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} loginOffset
 * @param {flatbuffers.Offset} groupOffset
 * @param {flatbuffers.Offset} practiceOffset
 * @param {flatbuffers.Offset} projectOffset
 * @param {number} mark
 * @returns {flatbuffers.Offset}
 */
ds.Student.createStudent = function(builder, nameOffset, loginOffset, groupOffset, practiceOffset, projectOffset, mark) {
  ds.Student.startStudent(builder);
  ds.Student.addName(builder, nameOffset);
  ds.Student.addLogin(builder, loginOffset);
  ds.Student.addGroup(builder, groupOffset);
  ds.Student.addPractice(builder, practiceOffset);
  ds.Student.addProject(builder, projectOffset);
  ds.Student.addMark(builder, mark);
  return ds.Student.endStudent(builder);
}

/**
 * @constructor
 */
ds.Students = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {ds.Students}
 */
ds.Students.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {ds.Students=} obj
 * @returns {ds.Students}
 */
ds.Students.getRootAsStudents = function(bb, obj) {
  return (obj || new ds.Students).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {ds.Students=} obj
 * @returns {ds.Students}
 */
ds.Students.getSizePrefixedRootAsStudents = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ds.Students).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {ds.Student=} obj
 * @returns {ds.Student}
 */
ds.Students.prototype.kings = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new ds.Student).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
ds.Students.prototype.kingsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
ds.Students.startStudents = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} kingsOffset
 */
ds.Students.addKings = function(builder, kingsOffset) {
  builder.addFieldOffset(0, kingsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
ds.Students.createKingsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ds.Students.startKingsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
ds.Students.endStudents = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
ds.Students.finishStudentsBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
ds.Students.finishSizePrefixedStudentsBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} kingsOffset
 * @returns {flatbuffers.Offset}
 */
ds.Students.createStudents = function(builder, kingsOffset) {
  ds.Students.startStudents(builder);
  ds.Students.addKings(builder, kingsOffset);
  return ds.Students.endStudents(builder);
}

// Exports for Node.js and RequireJS
this.ds = ds;
